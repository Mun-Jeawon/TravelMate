flutter 
1. 기능 구현은 lib 폴더에 각 기능(메뉴)에 해당하는 dart파일 생성 후 코딩할 것
ex) 지도 기능 코딩 시 map.dart 파일 생성 후 코딩

2. main.dart는 각 기능들을 모두 총체시키는 역할이므로 각 dart파일을 콜하는 부분만 코딩할 것 (어떠한 기능과 관련된 함수는 ㄴㄴ)

3. 각 기능 구현 시 주석 좀 잘 달아주셈. Chat Gpt써도 너무 길어지면 구조 알아보기 힘드니까 구조도 좀 설명 해주셈여

-------------------------------------------------------------------------------


프론트 구조 대충 찌끄린거 내가 구상한거 챗지피티한테 정리해달라고 한거라서 이해 안가는거 있으면 나한테 물어봐주셈여
lib/
├── main.dart
├── # 화면별 UI 파일
│   ├── # 지도 기능 화면
│   ├── # 일정 관리 화면
│   ├── # 그룹 관리 화면
│   ├── # AI 추천 화면 + 추후에 챗봇으로 사용 가능할 수 도 있어서 					우선 보류하셈
│   ├── # 설정 화면
├── widgets/            # 재사용 가능한 위젯 : 라이브러리에서 위젯 받아와서 사용하는거 말고 인터넷에서 위젯 만들어져있는거 긁어오거나 직접 만들어서 사용하는 것들도 다 밑에 담아주셈.
│   ├── custom_button.dart
		=========*=========*========
윗부분들이 우선 3.27~ 해야할 일. 
이 밑에는 우선 뺴놓고 하셈.
		=========*=========*========*
├── services/           # API 호출 로직
│   ├── api_service.dart        # 공통 API 호출 로직
│   ├── map_service.dart        # 지도 관련 API 호출
│   ├── schedule_service.dart   # 일정 관리 API 호출
│   ├── group_service.dart      # 그룹 관리 API 호출
│   ├── ai_service.dart         # AI 추천 API 호출

-------------------여기 밑에부턴 아직 굳이 안읽어도 됨-------------------




# 서버 실행 방법
1. Node.js 설치 (버전 대충 맞는거 설치하셈)
2. 의존성 설치: `npm install`
3. 서버 실행: `node [파일이름]` 하거나 nodemon 라이브러리 다운받아서 nodemon [파일이름] 하면 됨.



node.js + express 
안 한지 너무 오래돼서 기억 안나는데 일단 다시 보고 공부해봄...
그 전까지 대충 기능은 안만들어도 되고 프론트 ui(버튼같은거)만 만들어주셈. 
다음 주까지 대충 공부해보고 백앤드 설계해봄.



-------------------------------------------------------------------------------

backend/
├── server.js          # 서버 진입점
├── routes/            # 라우트 파일
│   ├── map.js         # 지도 관련 API
│   ├── schedule.js    # 일정 관리 API
│   ├── group.js       # 그룹 관리 API
│   ├── ai.js          # AI 추천 API
├── models/            # 데이터베이스 모델
│   ├── User.js        # 사용자 모델
│   ├── Schedule.js    # 일정 모델
│   ├── Group.js       # 그룹 모델
├── controllers/       # 비즈니스 로직
│   ├── mapController.js
│   ├── scheduleController.js
│   ├── groupController.js
│   ├── aiController.js
├── config/            # 설정 파일
│   ├── db.js          # MongoDB 연결 설정
├── package.json       # 프로젝트 설정


-------------------------------------------------------------------------------

지도 기능 (routes/map.js):

GET /map/nearby: 사용자의 현재 위치 기반 관광지 추천
GET /map/search: 특정 여행지 검색
일정 관리 (routes/schedule.js):

POST /schedule: 일정 추가
GET /schedule: 일정 조회
PUT /schedule/:id: 일정 수정
DELETE /schedule/:id: 일정 삭제
그룹 관리 (routes/group.js):

POST /group: 그룹 생성
GET /group/:id: 그룹 정보 조회
PUT /group/:id: 그룹 정보 수정
POST /group/:id/invite: 그룹 멤버 초대
AI 추천 (routes/ai.js):

POST /ai/recommend: 사용자 데이터를 기반으로 일정 추천


추후 AWS 배포 시, 백엔드와 데이터베이스를 클라우드 환경으로 이전
